function hexToRgb(e$jscomp$7) {
var a$jscomp$0 = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
e$jscomp$7 = e$jscomp$7.replace(a$jscomp$0, function(e$jscomp$8, a$jscomp$1, t$jscomp$1, i$jscomp$3) {
return a$jscomp$1 + a$jscomp$1 + t$jscomp$1 + t$jscomp$1 + i$jscomp$3 + i$jscomp$3;
});
var t$jscomp$0 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e$jscomp$7);
return t$jscomp$0 ? {
r : parseInt(t$jscomp$0[1], 16),
g : parseInt(t$jscomp$0[2], 16),
b : parseInt(t$jscomp$0[3], 16)
} : null;
}
function clamp(e$jscomp$9, a$jscomp$2, t$jscomp$2) {
return Math.min(Math.max(e$jscomp$9, a$jscomp$2), t$jscomp$2);
}
function isInArray(e$jscomp$10, a$jscomp$3) {
return a$jscomp$3.indexOf(e$jscomp$10) > -1;
}
var pJS = function(e$jscomp$11, a$jscomp$4) {
var t$jscomp$3 = document.querySelector("#" + e$jscomp$11 + " > .particles-js-canvas-el");
this.pJS = {
canvas : {
el : t$jscomp$3,
w : t$jscomp$3.offsetWidth,
h : t$jscomp$3.offsetHeight
},
particles : {
number : {
value : 400,
density : {
enable : true,
value_area : 800
}
},
color : {
value : "#fff"
},
shape : {
type : "circle",
stroke : {
width : 0,
color : "#ff0000"
},
polygon : {
nb_sides : 5
},
image : {
src : "",
width : 100,
height : 100
}
},
opacity : {
value : 1,
random : false,
anim : {
enable : false,
speed : 2,
opacity_min : 0,
sync : false
}
},
size : {
value : 20,
random : false,
anim : {
enable : false,
speed : 20,
size_min : 0,
sync : false
}
},
line_linked : {
enable : true,
distance : 100,
color : "#fff",
opacity : 1,
width : 1
},
move : {
enable : true,
speed : 2,
direction : "none",
random : false,
straight : false,
out_mode : "out",
bounce : false,
attract : {
enable : false,
rotateX : 3e3,
rotateY : 3e3
}
},
array : []
},
interactivity : {
detect_on : "canvas",
events : {
onhover : {
enable : true,
mode : "grab"
},
onclick : {
enable : true,
mode : "push"
},
resize : true
},
modes : {
grab : {
distance : 100,
line_linked : {
opacity : 1
}
},
bubble : {
distance : 200,
size : 80,
duration : .4
},
repulse : {
distance : 200,
duration : .4
},
push : {
particles_nb : 4
},
remove : {
particles_nb : 2
}
},
mouse : {}
},
retina_detect : false,
fn : {
interact : {},
modes : {},
vendors : {}
},
tmp : {}
};
var i$jscomp$4 = this.pJS;
if (a$jscomp$4) {
Object.deepExtend(i$jscomp$4, a$jscomp$4);
}
i$jscomp$4.tmp.obj = {
size_value : i$jscomp$4.particles.size.value,
size_anim_speed : i$jscomp$4.particles.size.anim.speed,
move_speed : i$jscomp$4.particles.move.speed,
line_linked_distance : i$jscomp$4.particles.line_linked.distance,
line_linked_width : i$jscomp$4.particles.line_linked.width,
mode_grab_distance : i$jscomp$4.interactivity.modes.grab.distance,
mode_bubble_distance : i$jscomp$4.interactivity.modes.bubble.distance,
mode_bubble_size : i$jscomp$4.interactivity.modes.bubble.size,
mode_repulse_distance : i$jscomp$4.interactivity.modes.repulse.distance
};
i$jscomp$4.fn.retinaInit = function() {
if (i$jscomp$4.retina_detect && window.devicePixelRatio > 1) {
i$jscomp$4.canvas.pxratio = window.devicePixelRatio;
i$jscomp$4.tmp.retina = true;
} else {
i$jscomp$4.canvas.pxratio = 1;
i$jscomp$4.tmp.retina = false;
}
i$jscomp$4.canvas.w = i$jscomp$4.canvas.el.offsetWidth * i$jscomp$4.canvas.pxratio;
i$jscomp$4.canvas.h = i$jscomp$4.canvas.el.offsetHeight * i$jscomp$4.canvas.pxratio;
i$jscomp$4.particles.size.value = i$jscomp$4.tmp.obj.size_value * i$jscomp$4.canvas.pxratio;
i$jscomp$4.particles.size.anim.speed = i$jscomp$4.tmp.obj.size_anim_speed * i$jscomp$4.canvas.pxratio;
i$jscomp$4.particles.move.speed = i$jscomp$4.tmp.obj.move_speed * i$jscomp$4.canvas.pxratio;
i$jscomp$4.particles.line_linked.distance = i$jscomp$4.tmp.obj.line_linked_distance * i$jscomp$4.canvas.pxratio;
i$jscomp$4.interactivity.modes.grab.distance = i$jscomp$4.tmp.obj.mode_grab_distance * i$jscomp$4.canvas.pxratio;
i$jscomp$4.interactivity.modes.bubble.distance = i$jscomp$4.tmp.obj.mode_bubble_distance * i$jscomp$4.canvas.pxratio;
i$jscomp$4.particles.line_linked.width = i$jscomp$4.tmp.obj.line_linked_width * i$jscomp$4.canvas.pxratio;
i$jscomp$4.interactivity.modes.bubble.size = i$jscomp$4.tmp.obj.mode_bubble_size * i$jscomp$4.canvas.pxratio;
i$jscomp$4.interactivity.modes.repulse.distance = i$jscomp$4.tmp.obj.mode_repulse_distance * i$jscomp$4.canvas.pxratio;
};
i$jscomp$4.fn.canvasInit = function() {
i$jscomp$4.canvas.ctx = i$jscomp$4.canvas.el.getContext("2d");
};
i$jscomp$4.fn.canvasSize = function() {
i$jscomp$4.canvas.el.width = i$jscomp$4.canvas.w;
i$jscomp$4.canvas.el.height = i$jscomp$4.canvas.h;
if (i$jscomp$4 && i$jscomp$4.interactivity.events.resize) {
window.addEventListener("resize", function() {
i$jscomp$4.canvas.w = i$jscomp$4.canvas.el.offsetWidth;
i$jscomp$4.canvas.h = i$jscomp$4.canvas.el.offsetHeight;
if (i$jscomp$4.tmp.retina) {
i$jscomp$4.canvas.w *= i$jscomp$4.canvas.pxratio;
i$jscomp$4.canvas.h *= i$jscomp$4.canvas.pxratio;
}
i$jscomp$4.canvas.el.width = i$jscomp$4.canvas.w;
i$jscomp$4.canvas.el.height = i$jscomp$4.canvas.h;
if (!i$jscomp$4.particles.move.enable) {
i$jscomp$4.fn.particlesEmpty();
i$jscomp$4.fn.particlesCreate();
i$jscomp$4.fn.particlesDraw();
i$jscomp$4.fn.vendors.densityAutoParticles();
}
i$jscomp$4.fn.vendors.densityAutoParticles();
});
}
};
i$jscomp$4.fn.canvasPaint = function() {
i$jscomp$4.canvas.ctx.fillRect(0, 0, i$jscomp$4.canvas.w, i$jscomp$4.canvas.h);
};
i$jscomp$4.fn.canvasClear = function() {
i$jscomp$4.canvas.ctx.clearRect(0, 0, i$jscomp$4.canvas.w, i$jscomp$4.canvas.h);
};
i$jscomp$4.fn.particle = function(e$jscomp$12, a$jscomp$5, t$jscomp$4) {
if (this.radius = (i$jscomp$4.particles.size.random ? Math.random() : 1) * i$jscomp$4.particles.size.value, i$jscomp$4.particles.size.anim.enable && (this.size_status = false, this.vs = i$jscomp$4.particles.size.anim.speed / 100, i$jscomp$4.particles.size.anim.sync || (this.vs = this.vs * Math.random())), this.x = t$jscomp$4 ? t$jscomp$4.x : Math.random() * i$jscomp$4.canvas.w, this.y = t$jscomp$4 ? t$jscomp$4.y : Math.random() * i$jscomp$4.canvas.h, this.x > i$jscomp$4.canvas.w - 2 * this.radius ?
this.x = this.x - this.radius : this.x < 2 * this.radius && (this.x = this.x + this.radius), this.y > i$jscomp$4.canvas.h - 2 * this.radius ? this.y = this.y - this.radius : this.y < 2 * this.radius && (this.y = this.y + this.radius), i$jscomp$4.particles.move.bounce && i$jscomp$4.fn.vendors.checkOverlap(this, t$jscomp$4), this.color = {}, "object" == typeof e$jscomp$12.value) {
if (e$jscomp$12.value instanceof Array) {
var s$jscomp$2 = e$jscomp$12.value[Math.floor(Math.random() * i$jscomp$4.particles.color.value.length)];
this.color.rgb = hexToRgb(s$jscomp$2);
} else {
if (void 0 != e$jscomp$12.value.r && void 0 != e$jscomp$12.value.g && void 0 != e$jscomp$12.value.b) {
this.color.rgb = {
r : e$jscomp$12.value.r,
g : e$jscomp$12.value.g,
b : e$jscomp$12.value.b
};
}
if (void 0 != e$jscomp$12.value.h && void 0 != e$jscomp$12.value.s && void 0 != e$jscomp$12.value.l) {
this.color.hsl = {
h : e$jscomp$12.value.h,
s : e$jscomp$12.value.s,
l : e$jscomp$12.value.l
};
}
}
} else {
if ("random" == e$jscomp$12.value) {
this.color.rgb = {
r : Math.floor(256 * Math.random()) + 0,
g : Math.floor(256 * Math.random()) + 0,
b : Math.floor(256 * Math.random()) + 0
};
} else {
if ("string" == typeof e$jscomp$12.value) {
this.color = e$jscomp$12;
this.color.rgb = hexToRgb(this.color.value);
}
}
}
this.opacity = (i$jscomp$4.particles.opacity.random ? Math.random() : 1) * i$jscomp$4.particles.opacity.value;
if (i$jscomp$4.particles.opacity.anim.enable) {
this.opacity_status = false;
this.vo = i$jscomp$4.particles.opacity.anim.speed / 100;
if (!i$jscomp$4.particles.opacity.anim.sync) {
this.vo = this.vo * Math.random();
}
}
var n$jscomp$3 = {};
switch(i$jscomp$4.particles.move.direction) {
case "top":
n$jscomp$3 = {
x : 0,
y : -1
};
break;
case "top-right":
n$jscomp$3 = {
x : .5,
y : -.5
};
break;
case "right":
n$jscomp$3 = {
x : 1,
y : -0
};
break;
case "bottom-right":
n$jscomp$3 = {
x : .5,
y : .5
};
break;
case "bottom":
n$jscomp$3 = {
x : 0,
y : 1
};
break;
case "bottom-left":
n$jscomp$3 = {
x : -.5,
y : 1
};
break;
case "left":
n$jscomp$3 = {
x : -1,
y : 0
};
break;
case "top-left":
n$jscomp$3 = {
x : -.5,
y : -.5
};
break;
default:
n$jscomp$3 = {
x : 0,
y : 0
};
}
if (i$jscomp$4.particles.move.straight) {
this.vx = n$jscomp$3.x;
this.vy = n$jscomp$3.y;
if (i$jscomp$4.particles.move.random) {
this.vx = this.vx * Math.random();
this.vy = this.vy * Math.random();
}
} else {
this.vx = n$jscomp$3.x + Math.random() - .5;
this.vy = n$jscomp$3.y + Math.random() - .5;
}
this.vx_i = this.vx;
this.vy_i = this.vy;
var r$jscomp$1 = i$jscomp$4.particles.shape.type;
if ("object" == typeof r$jscomp$1) {
if (r$jscomp$1 instanceof Array) {
var c$jscomp$0 = r$jscomp$1[Math.floor(Math.random() * r$jscomp$1.length)];
this.shape = c$jscomp$0;
}
} else {
this.shape = r$jscomp$1;
}
if ("image" == this.shape) {
var o$jscomp$0 = i$jscomp$4.particles.shape;
this.img = {
src : o$jscomp$0.image.src,
ratio : o$jscomp$0.image.width / o$jscomp$0.image.height
};
if (!this.img.ratio) {
this.img.ratio = 1;
}
if ("svg" == i$jscomp$4.tmp.img_type && void 0 != i$jscomp$4.tmp.source_svg) {
i$jscomp$4.fn.vendors.createSvgImg(this);
if (i$jscomp$4.tmp.pushing) {
this.img.loaded = false;
}
}
}
};
i$jscomp$4.fn.particle.prototype.draw = function() {
function e$jscomp$13() {
i$jscomp$4.canvas.ctx.drawImage(r$jscomp$2, a$jscomp$6.x - t$jscomp$5, a$jscomp$6.y - t$jscomp$5, 2 * t$jscomp$5, 2 * t$jscomp$5 / a$jscomp$6.img.ratio);
}
var a$jscomp$6 = this;
if (void 0 != a$jscomp$6.radius_bubble) {
var t$jscomp$5 = a$jscomp$6.radius_bubble;
} else {
t$jscomp$5 = a$jscomp$6.radius;
}
if (void 0 != a$jscomp$6.opacity_bubble) {
var s$jscomp$3 = a$jscomp$6.opacity_bubble;
} else {
s$jscomp$3 = a$jscomp$6.opacity;
}
if (a$jscomp$6.color.rgb) {
var n$jscomp$4 = "rgba(" + a$jscomp$6.color.rgb.r + "," + a$jscomp$6.color.rgb.g + "," + a$jscomp$6.color.rgb.b + "," + s$jscomp$3 + ")";
} else {
n$jscomp$4 = "hsla(" + a$jscomp$6.color.hsl.h + "," + a$jscomp$6.color.hsl.s + "%," + a$jscomp$6.color.hsl.l + "%," + s$jscomp$3 + ")";
}
switch(i$jscomp$4.canvas.ctx.fillStyle = n$jscomp$4, i$jscomp$4.canvas.ctx.beginPath(), a$jscomp$6.shape) {
case "circle":
i$jscomp$4.canvas.ctx.arc(a$jscomp$6.x, a$jscomp$6.y, t$jscomp$5, 0, 2 * Math.PI, false);
break;
case "edge":
i$jscomp$4.canvas.ctx.rect(a$jscomp$6.x - t$jscomp$5, a$jscomp$6.y - t$jscomp$5, 2 * t$jscomp$5, 2 * t$jscomp$5);
break;
case "triangle":
i$jscomp$4.fn.vendors.drawShape(i$jscomp$4.canvas.ctx, a$jscomp$6.x - t$jscomp$5, a$jscomp$6.y + t$jscomp$5 / 1.66, 2 * t$jscomp$5, 3, 2);
break;
case "polygon":
i$jscomp$4.fn.vendors.drawShape(i$jscomp$4.canvas.ctx, a$jscomp$6.x - t$jscomp$5 / (i$jscomp$4.particles.shape.polygon.nb_sides / 3.5), a$jscomp$6.y - t$jscomp$5 / .76, 2.66 * t$jscomp$5 / (i$jscomp$4.particles.shape.polygon.nb_sides / 3), i$jscomp$4.particles.shape.polygon.nb_sides, 1);
break;
case "star":
i$jscomp$4.fn.vendors.drawShape(i$jscomp$4.canvas.ctx, a$jscomp$6.x - 2 * t$jscomp$5 / (i$jscomp$4.particles.shape.polygon.nb_sides / 4), a$jscomp$6.y - t$jscomp$5 / 1.52, 2 * t$jscomp$5 * 2.66 / (i$jscomp$4.particles.shape.polygon.nb_sides / 3), i$jscomp$4.particles.shape.polygon.nb_sides, 2);
break;
case "image":
if ("svg" == i$jscomp$4.tmp.img_type) {
var r$jscomp$2 = a$jscomp$6.img.obj;
} else {
r$jscomp$2 = i$jscomp$4.tmp.img_obj;
}
if (r$jscomp$2) {
e$jscomp$13();
}
}
i$jscomp$4.canvas.ctx.closePath();
if (i$jscomp$4.particles.shape.stroke.width > 0) {
i$jscomp$4.canvas.ctx.strokeStyle = i$jscomp$4.particles.shape.stroke.color;
i$jscomp$4.canvas.ctx.lineWidth = i$jscomp$4.particles.shape.stroke.width;
i$jscomp$4.canvas.ctx.stroke();
}
i$jscomp$4.canvas.ctx.fill();
};
i$jscomp$4.fn.particlesCreate = function() {
var e$jscomp$14 = 0;
for (; e$jscomp$14 < i$jscomp$4.particles.number.value; e$jscomp$14++) {
i$jscomp$4.particles.array.push(new i$jscomp$4.fn.particle(i$jscomp$4.particles.color, i$jscomp$4.particles.opacity.value));
}
};
i$jscomp$4.fn.particlesUpdate = function() {
var e$jscomp$15 = 0;
for (; e$jscomp$15 < i$jscomp$4.particles.array.length; e$jscomp$15++) {
var a$jscomp$7 = i$jscomp$4.particles.array[e$jscomp$15];
if (i$jscomp$4.particles.move.enable) {
var t$jscomp$6 = i$jscomp$4.particles.move.speed / 2;
a$jscomp$7.x += a$jscomp$7.vx * t$jscomp$6;
a$jscomp$7.y += a$jscomp$7.vy * t$jscomp$6;
}
if (i$jscomp$4.particles.opacity.anim.enable && (1 == a$jscomp$7.opacity_status ? (a$jscomp$7.opacity >= i$jscomp$4.particles.opacity.value && (a$jscomp$7.opacity_status = false), a$jscomp$7.opacity += a$jscomp$7.vo) : (a$jscomp$7.opacity <= i$jscomp$4.particles.opacity.anim.opacity_min && (a$jscomp$7.opacity_status = true), a$jscomp$7.opacity -= a$jscomp$7.vo), a$jscomp$7.opacity < 0 && (a$jscomp$7.opacity = 0)), i$jscomp$4.particles.size.anim.enable && (1 == a$jscomp$7.size_status ? (a$jscomp$7.radius >=
i$jscomp$4.particles.size.value && (a$jscomp$7.size_status = false), a$jscomp$7.radius += a$jscomp$7.vs) : (a$jscomp$7.radius <= i$jscomp$4.particles.size.anim.size_min && (a$jscomp$7.size_status = true), a$jscomp$7.radius -= a$jscomp$7.vs), a$jscomp$7.radius < 0 && (a$jscomp$7.radius = 0)), "bounce" == i$jscomp$4.particles.move.out_mode) {
var s$jscomp$4 = {
x_left : a$jscomp$7.radius,
x_right : i$jscomp$4.canvas.w,
y_top : a$jscomp$7.radius,
y_bottom : i$jscomp$4.canvas.h
};
} else {
s$jscomp$4 = {
x_left : -a$jscomp$7.radius,
x_right : i$jscomp$4.canvas.w + a$jscomp$7.radius,
y_top : -a$jscomp$7.radius,
y_bottom : i$jscomp$4.canvas.h + a$jscomp$7.radius
};
}
switch(a$jscomp$7.x - a$jscomp$7.radius > i$jscomp$4.canvas.w ? (a$jscomp$7.x = s$jscomp$4.x_left, a$jscomp$7.y = Math.random() * i$jscomp$4.canvas.h) : a$jscomp$7.x + a$jscomp$7.radius < 0 && (a$jscomp$7.x = s$jscomp$4.x_right, a$jscomp$7.y = Math.random() * i$jscomp$4.canvas.h), a$jscomp$7.y - a$jscomp$7.radius > i$jscomp$4.canvas.h ? (a$jscomp$7.y = s$jscomp$4.y_top, a$jscomp$7.x = Math.random() * i$jscomp$4.canvas.w) : a$jscomp$7.y + a$jscomp$7.radius < 0 && (a$jscomp$7.y = s$jscomp$4.y_bottom,
a$jscomp$7.x = Math.random() * i$jscomp$4.canvas.w), i$jscomp$4.particles.move.out_mode) {
case "bounce":
if (a$jscomp$7.x + a$jscomp$7.radius > i$jscomp$4.canvas.w) {
a$jscomp$7.vx = -a$jscomp$7.vx;
} else {
if (a$jscomp$7.x - a$jscomp$7.radius < 0) {
a$jscomp$7.vx = -a$jscomp$7.vx;
}
}
if (a$jscomp$7.y + a$jscomp$7.radius > i$jscomp$4.canvas.h) {
a$jscomp$7.vy = -a$jscomp$7.vy;
} else {
if (a$jscomp$7.y - a$jscomp$7.radius < 0) {
a$jscomp$7.vy = -a$jscomp$7.vy;
}
}
}
if (isInArray("grab", i$jscomp$4.interactivity.events.onhover.mode) && i$jscomp$4.fn.modes.grabParticle(a$jscomp$7), (isInArray("bubble", i$jscomp$4.interactivity.events.onhover.mode) || isInArray("bubble", i$jscomp$4.interactivity.events.onclick.mode)) && i$jscomp$4.fn.modes.bubbleParticle(a$jscomp$7), (isInArray("repulse", i$jscomp$4.interactivity.events.onhover.mode) || isInArray("repulse", i$jscomp$4.interactivity.events.onclick.mode)) && i$jscomp$4.fn.modes.repulseParticle(a$jscomp$7),
i$jscomp$4.particles.line_linked.enable || i$jscomp$4.particles.move.attract.enable) {
var n$jscomp$5 = e$jscomp$15 + 1;
for (; n$jscomp$5 < i$jscomp$4.particles.array.length; n$jscomp$5++) {
var r$jscomp$3 = i$jscomp$4.particles.array[n$jscomp$5];
if (i$jscomp$4.particles.line_linked.enable) {
i$jscomp$4.fn.interact.linkParticles(a$jscomp$7, r$jscomp$3);
}
if (i$jscomp$4.particles.move.attract.enable) {
i$jscomp$4.fn.interact.attractParticles(a$jscomp$7, r$jscomp$3);
}
if (i$jscomp$4.particles.move.bounce) {
i$jscomp$4.fn.interact.bounceParticles(a$jscomp$7, r$jscomp$3);
}
}
}
}
};
i$jscomp$4.fn.particlesDraw = function() {
i$jscomp$4.canvas.ctx.clearRect(0, 0, i$jscomp$4.canvas.w, i$jscomp$4.canvas.h);
i$jscomp$4.fn.particlesUpdate();
var e$jscomp$16 = 0;
for (; e$jscomp$16 < i$jscomp$4.particles.array.length; e$jscomp$16++) {
var a$jscomp$8 = i$jscomp$4.particles.array[e$jscomp$16];
a$jscomp$8.draw();
}
};
i$jscomp$4.fn.particlesEmpty = function() {
i$jscomp$4.particles.array = [];
};
i$jscomp$4.fn.particlesRefresh = function() {
cancelRequestAnimFrame(i$jscomp$4.fn.checkAnimFrame);
cancelRequestAnimFrame(i$jscomp$4.fn.drawAnimFrame);
i$jscomp$4.tmp.source_svg = void 0;
i$jscomp$4.tmp.img_obj = void 0;
i$jscomp$4.tmp.count_svg = 0;
i$jscomp$4.fn.particlesEmpty();
i$jscomp$4.fn.canvasClear();
i$jscomp$4.fn.vendors.start();
};
i$jscomp$4.fn.interact.linkParticles = function(e$jscomp$17, a$jscomp$9) {
var t$jscomp$7 = e$jscomp$17.x - a$jscomp$9.x;
var s$jscomp$5 = e$jscomp$17.y - a$jscomp$9.y;
var n$jscomp$6 = Math.sqrt(t$jscomp$7 * t$jscomp$7 + s$jscomp$5 * s$jscomp$5);
if (n$jscomp$6 <= i$jscomp$4.particles.line_linked.distance) {
var r$jscomp$4 = i$jscomp$4.particles.line_linked.opacity - n$jscomp$6 / (1 / i$jscomp$4.particles.line_linked.opacity) / i$jscomp$4.particles.line_linked.distance;
if (r$jscomp$4 > 0) {
var c$jscomp$1 = i$jscomp$4.particles.line_linked.color_rgb_line;
i$jscomp$4.canvas.ctx.strokeStyle = "rgba(" + c$jscomp$1.r + "," + c$jscomp$1.g + "," + c$jscomp$1.b + "," + r$jscomp$4 + ")";
i$jscomp$4.canvas.ctx.lineWidth = i$jscomp$4.particles.line_linked.width;
i$jscomp$4.canvas.ctx.beginPath();
i$jscomp$4.canvas.ctx.moveTo(e$jscomp$17.x, e$jscomp$17.y);
i$jscomp$4.canvas.ctx.lineTo(a$jscomp$9.x, a$jscomp$9.y);
i$jscomp$4.canvas.ctx.stroke();
i$jscomp$4.canvas.ctx.closePath();
}
}
};
i$jscomp$4.fn.interact.attractParticles = function(e$jscomp$18, a$jscomp$10) {
var t$jscomp$8 = e$jscomp$18.x - a$jscomp$10.x;
var s$jscomp$6 = e$jscomp$18.y - a$jscomp$10.y;
var n$jscomp$7 = Math.sqrt(t$jscomp$8 * t$jscomp$8 + s$jscomp$6 * s$jscomp$6);
if (n$jscomp$7 <= i$jscomp$4.particles.line_linked.distance) {
var r$jscomp$5 = t$jscomp$8 / (1E3 * i$jscomp$4.particles.move.attract.rotateX);
var c$jscomp$2 = s$jscomp$6 / (1E3 * i$jscomp$4.particles.move.attract.rotateY);
e$jscomp$18.vx -= r$jscomp$5;
e$jscomp$18.vy -= c$jscomp$2;
a$jscomp$10.vx += r$jscomp$5;
a$jscomp$10.vy += c$jscomp$2;
}
};
i$jscomp$4.fn.interact.bounceParticles = function(e$jscomp$19, a$jscomp$11) {
var t$jscomp$9 = e$jscomp$19.x - a$jscomp$11.x;
var i$jscomp$5 = e$jscomp$19.y - a$jscomp$11.y;
var s$jscomp$7 = Math.sqrt(t$jscomp$9 * t$jscomp$9 + i$jscomp$5 * i$jscomp$5);
var n$jscomp$8 = e$jscomp$19.radius + a$jscomp$11.radius;
if (n$jscomp$8 >= s$jscomp$7) {
e$jscomp$19.vx = -e$jscomp$19.vx;
e$jscomp$19.vy = -e$jscomp$19.vy;
a$jscomp$11.vx = -a$jscomp$11.vx;
a$jscomp$11.vy = -a$jscomp$11.vy;
}
};
i$jscomp$4.fn.modes.pushParticles = function(e$jscomp$20, a$jscomp$12) {
i$jscomp$4.tmp.pushing = true;
var t$jscomp$10 = 0;
for (; e$jscomp$20 > t$jscomp$10; t$jscomp$10++) {
i$jscomp$4.particles.array.push(new i$jscomp$4.fn.particle(i$jscomp$4.particles.color, i$jscomp$4.particles.opacity.value, {
x : a$jscomp$12 ? a$jscomp$12.pos_x : Math.random() * i$jscomp$4.canvas.w,
y : a$jscomp$12 ? a$jscomp$12.pos_y : Math.random() * i$jscomp$4.canvas.h
}));
if (t$jscomp$10 == e$jscomp$20 - 1) {
if (!i$jscomp$4.particles.move.enable) {
i$jscomp$4.fn.particlesDraw();
}
i$jscomp$4.tmp.pushing = false;
}
}
};
i$jscomp$4.fn.modes.removeParticles = function(e$jscomp$21) {
i$jscomp$4.particles.array.splice(0, e$jscomp$21);
if (!i$jscomp$4.particles.move.enable) {
i$jscomp$4.fn.particlesDraw();
}
};
i$jscomp$4.fn.modes.bubbleParticle = function(e$jscomp$22) {
function a$jscomp$13() {
e$jscomp$22.opacity_bubble = e$jscomp$22.opacity;
e$jscomp$22.radius_bubble = e$jscomp$22.radius;
}
function t$jscomp$11(a$jscomp$14, t$jscomp$12, s$jscomp$9, n$jscomp$10, c$jscomp$4) {
if (a$jscomp$14 != t$jscomp$12) {
if (i$jscomp$4.tmp.bubble_duration_end) {
if (void 0 != s$jscomp$9) {
var o$jscomp$2 = n$jscomp$10 - p$jscomp$0 * (n$jscomp$10 - a$jscomp$14) / i$jscomp$4.interactivity.modes.bubble.duration;
var l$jscomp$1 = a$jscomp$14 - o$jscomp$2;
d$jscomp$0 = a$jscomp$14 + l$jscomp$1;
if ("size" == c$jscomp$4) {
e$jscomp$22.radius_bubble = d$jscomp$0;
}
if ("opacity" == c$jscomp$4) {
e$jscomp$22.opacity_bubble = d$jscomp$0;
}
}
} else {
if (r$jscomp$6 <= i$jscomp$4.interactivity.modes.bubble.distance) {
if (void 0 != s$jscomp$9) {
var v$jscomp$1 = s$jscomp$9;
} else {
v$jscomp$1 = n$jscomp$10;
}
if (v$jscomp$1 != a$jscomp$14) {
var d$jscomp$0 = n$jscomp$10 - p$jscomp$0 * (n$jscomp$10 - a$jscomp$14) / i$jscomp$4.interactivity.modes.bubble.duration;
if ("size" == c$jscomp$4) {
e$jscomp$22.radius_bubble = d$jscomp$0;
}
if ("opacity" == c$jscomp$4) {
e$jscomp$22.opacity_bubble = d$jscomp$0;
}
}
} else {
if ("size" == c$jscomp$4) {
e$jscomp$22.radius_bubble = void 0;
}
if ("opacity" == c$jscomp$4) {
e$jscomp$22.opacity_bubble = void 0;
}
}
}
}
}
if (i$jscomp$4.interactivity.events.onhover.enable && isInArray("bubble", i$jscomp$4.interactivity.events.onhover.mode)) {
var s$jscomp$8 = e$jscomp$22.x - i$jscomp$4.interactivity.mouse.pos_x;
var n$jscomp$9 = e$jscomp$22.y - i$jscomp$4.interactivity.mouse.pos_y;
var r$jscomp$6 = Math.sqrt(s$jscomp$8 * s$jscomp$8 + n$jscomp$9 * n$jscomp$9);
var c$jscomp$3 = 1 - r$jscomp$6 / i$jscomp$4.interactivity.modes.bubble.distance;
if (r$jscomp$6 <= i$jscomp$4.interactivity.modes.bubble.distance) {
if (c$jscomp$3 >= 0 && "mousemove" == i$jscomp$4.interactivity.status) {
if (i$jscomp$4.interactivity.modes.bubble.size != i$jscomp$4.particles.size.value) {
if (i$jscomp$4.interactivity.modes.bubble.size > i$jscomp$4.particles.size.value) {
var o$jscomp$1 = e$jscomp$22.radius + i$jscomp$4.interactivity.modes.bubble.size * c$jscomp$3;
if (o$jscomp$1 >= 0) {
e$jscomp$22.radius_bubble = o$jscomp$1;
}
} else {
var l$jscomp$0 = e$jscomp$22.radius - i$jscomp$4.interactivity.modes.bubble.size;
o$jscomp$1 = e$jscomp$22.radius - l$jscomp$0 * c$jscomp$3;
if (o$jscomp$1 > 0) {
e$jscomp$22.radius_bubble = o$jscomp$1;
} else {
e$jscomp$22.radius_bubble = 0;
}
}
}
if (i$jscomp$4.interactivity.modes.bubble.opacity != i$jscomp$4.particles.opacity.value) {
if (i$jscomp$4.interactivity.modes.bubble.opacity > i$jscomp$4.particles.opacity.value) {
var v$jscomp$0 = i$jscomp$4.interactivity.modes.bubble.opacity * c$jscomp$3;
if (v$jscomp$0 > e$jscomp$22.opacity && v$jscomp$0 <= i$jscomp$4.interactivity.modes.bubble.opacity) {
e$jscomp$22.opacity_bubble = v$jscomp$0;
}
} else {
v$jscomp$0 = e$jscomp$22.opacity - (i$jscomp$4.particles.opacity.value - i$jscomp$4.interactivity.modes.bubble.opacity) * c$jscomp$3;
if (v$jscomp$0 < e$jscomp$22.opacity && v$jscomp$0 >= i$jscomp$4.interactivity.modes.bubble.opacity) {
e$jscomp$22.opacity_bubble = v$jscomp$0;
}
}
}
}
} else {
a$jscomp$13();
}
if ("mouseleave" == i$jscomp$4.interactivity.status) {
a$jscomp$13();
}
} else {
if (i$jscomp$4.interactivity.events.onclick.enable && isInArray("bubble", i$jscomp$4.interactivity.events.onclick.mode)) {
if (i$jscomp$4.tmp.bubble_clicking) {
s$jscomp$8 = e$jscomp$22.x - i$jscomp$4.interactivity.mouse.click_pos_x;
n$jscomp$9 = e$jscomp$22.y - i$jscomp$4.interactivity.mouse.click_pos_y;
r$jscomp$6 = Math.sqrt(s$jscomp$8 * s$jscomp$8 + n$jscomp$9 * n$jscomp$9);
var p$jscomp$0 = ((new Date).getTime() - i$jscomp$4.interactivity.mouse.click_time) / 1E3;
if (p$jscomp$0 > i$jscomp$4.interactivity.modes.bubble.duration) {
i$jscomp$4.tmp.bubble_duration_end = true;
}
if (p$jscomp$0 > 2 * i$jscomp$4.interactivity.modes.bubble.duration) {
i$jscomp$4.tmp.bubble_clicking = false;
i$jscomp$4.tmp.bubble_duration_end = false;
}
}
if (i$jscomp$4.tmp.bubble_clicking) {
t$jscomp$11(i$jscomp$4.interactivity.modes.bubble.size, i$jscomp$4.particles.size.value, e$jscomp$22.radius_bubble, e$jscomp$22.radius, "size");
t$jscomp$11(i$jscomp$4.interactivity.modes.bubble.opacity, i$jscomp$4.particles.opacity.value, e$jscomp$22.opacity_bubble, e$jscomp$22.opacity, "opacity");
}
}
}
};
i$jscomp$4.fn.modes.repulseParticle = function(e$jscomp$23) {
function a$jscomp$15() {
var a$jscomp$16 = Math.atan2(d$jscomp$1, p$jscomp$1);
if (e$jscomp$23.vx = u$jscomp$0 * Math.cos(a$jscomp$16), e$jscomp$23.vy = u$jscomp$0 * Math.sin(a$jscomp$16), "bounce" == i$jscomp$4.particles.move.out_mode) {
var t$jscomp$14 = {
x : e$jscomp$23.x + e$jscomp$23.vx,
y : e$jscomp$23.y + e$jscomp$23.vy
};
if (t$jscomp$14.x + e$jscomp$23.radius > i$jscomp$4.canvas.w) {
e$jscomp$23.vx = -e$jscomp$23.vx;
} else {
if (t$jscomp$14.x - e$jscomp$23.radius < 0) {
e$jscomp$23.vx = -e$jscomp$23.vx;
}
}
if (t$jscomp$14.y + e$jscomp$23.radius > i$jscomp$4.canvas.h) {
e$jscomp$23.vy = -e$jscomp$23.vy;
} else {
if (t$jscomp$14.y - e$jscomp$23.radius < 0) {
e$jscomp$23.vy = -e$jscomp$23.vy;
}
}
}
}
if (i$jscomp$4.interactivity.events.onhover.enable && isInArray("repulse", i$jscomp$4.interactivity.events.onhover.mode) && "mousemove" == i$jscomp$4.interactivity.status) {
var t$jscomp$13 = e$jscomp$23.x - i$jscomp$4.interactivity.mouse.pos_x;
var s$jscomp$10 = e$jscomp$23.y - i$jscomp$4.interactivity.mouse.pos_y;
var n$jscomp$11 = Math.sqrt(t$jscomp$13 * t$jscomp$13 + s$jscomp$10 * s$jscomp$10);
var r$jscomp$7 = {
x : t$jscomp$13 / n$jscomp$11,
y : s$jscomp$10 / n$jscomp$11
};
var c$jscomp$5 = i$jscomp$4.interactivity.modes.repulse.distance;
var o$jscomp$3 = 100;
var l$jscomp$2 = clamp(1 / c$jscomp$5 * (-1 * Math.pow(n$jscomp$11 / c$jscomp$5, 2) + 1) * c$jscomp$5 * o$jscomp$3, 0, 50);
var v$jscomp$2 = {
x : e$jscomp$23.x + r$jscomp$7.x * l$jscomp$2,
y : e$jscomp$23.y + r$jscomp$7.y * l$jscomp$2
};
if ("bounce" == i$jscomp$4.particles.move.out_mode) {
if (v$jscomp$2.x - e$jscomp$23.radius > 0 && v$jscomp$2.x + e$jscomp$23.radius < i$jscomp$4.canvas.w) {
e$jscomp$23.x = v$jscomp$2.x;
}
if (v$jscomp$2.y - e$jscomp$23.radius > 0 && v$jscomp$2.y + e$jscomp$23.radius < i$jscomp$4.canvas.h) {
e$jscomp$23.y = v$jscomp$2.y;
}
} else {
e$jscomp$23.x = v$jscomp$2.x;
e$jscomp$23.y = v$jscomp$2.y;
}
} else {
if (i$jscomp$4.interactivity.events.onclick.enable && isInArray("repulse", i$jscomp$4.interactivity.events.onclick.mode)) {
if (i$jscomp$4.tmp.repulse_finish || (i$jscomp$4.tmp.repulse_count++, i$jscomp$4.tmp.repulse_count == i$jscomp$4.particles.array.length && (i$jscomp$4.tmp.repulse_finish = true)), i$jscomp$4.tmp.repulse_clicking) {
c$jscomp$5 = Math.pow(i$jscomp$4.interactivity.modes.repulse.distance / 6, 3);
var p$jscomp$1 = i$jscomp$4.interactivity.mouse.click_pos_x - e$jscomp$23.x;
var d$jscomp$1 = i$jscomp$4.interactivity.mouse.click_pos_y - e$jscomp$23.y;
var m$jscomp$0 = p$jscomp$1 * p$jscomp$1 + d$jscomp$1 * d$jscomp$1;
var u$jscomp$0 = -c$jscomp$5 / m$jscomp$0 * 1;
if (c$jscomp$5 >= m$jscomp$0) {
a$jscomp$15();
}
} else {
if (0 == i$jscomp$4.tmp.repulse_clicking) {
e$jscomp$23.vx = e$jscomp$23.vx_i;
e$jscomp$23.vy = e$jscomp$23.vy_i;
}
}
}
}
};
i$jscomp$4.fn.modes.grabParticle = function(e$jscomp$24) {
if (i$jscomp$4.interactivity.events.onhover.enable && "mousemove" == i$jscomp$4.interactivity.status) {
var a$jscomp$17 = e$jscomp$24.x - i$jscomp$4.interactivity.mouse.pos_x;
var t$jscomp$15 = e$jscomp$24.y - i$jscomp$4.interactivity.mouse.pos_y;
var s$jscomp$11 = Math.sqrt(a$jscomp$17 * a$jscomp$17 + t$jscomp$15 * t$jscomp$15);
if (s$jscomp$11 <= i$jscomp$4.interactivity.modes.grab.distance) {
var n$jscomp$12 = i$jscomp$4.interactivity.modes.grab.line_linked.opacity - s$jscomp$11 / (1 / i$jscomp$4.interactivity.modes.grab.line_linked.opacity) / i$jscomp$4.interactivity.modes.grab.distance;
if (n$jscomp$12 > 0) {
var r$jscomp$8 = i$jscomp$4.particles.line_linked.color_rgb_line;
i$jscomp$4.canvas.ctx.strokeStyle = "rgba(" + r$jscomp$8.r + "," + r$jscomp$8.g + "," + r$jscomp$8.b + "," + n$jscomp$12 + ")";
i$jscomp$4.canvas.ctx.lineWidth = i$jscomp$4.particles.line_linked.width;
i$jscomp$4.canvas.ctx.beginPath();
i$jscomp$4.canvas.ctx.moveTo(e$jscomp$24.x, e$jscomp$24.y);
i$jscomp$4.canvas.ctx.lineTo(i$jscomp$4.interactivity.mouse.pos_x, i$jscomp$4.interactivity.mouse.pos_y);
i$jscomp$4.canvas.ctx.stroke();
i$jscomp$4.canvas.ctx.closePath();
}
}
}
};
i$jscomp$4.fn.vendors.eventsListeners = function() {
if ("window" == i$jscomp$4.interactivity.detect_on) {
i$jscomp$4.interactivity.el = window;
} else {
i$jscomp$4.interactivity.el = i$jscomp$4.canvas.el;
}
if (i$jscomp$4.interactivity.events.onhover.enable || i$jscomp$4.interactivity.events.onclick.enable) {
i$jscomp$4.interactivity.el.addEventListener("mousemove", function(e$jscomp$25) {
if (i$jscomp$4.interactivity.el == window) {
var a$jscomp$18 = e$jscomp$25.clientX;
var t$jscomp$16 = e$jscomp$25.clientY;
} else {
a$jscomp$18 = e$jscomp$25.offsetX || e$jscomp$25.clientX;
t$jscomp$16 = e$jscomp$25.offsetY || e$jscomp$25.clientY;
}
i$jscomp$4.interactivity.mouse.pos_x = a$jscomp$18;
i$jscomp$4.interactivity.mouse.pos_y = t$jscomp$16;
if (i$jscomp$4.tmp.retina) {
i$jscomp$4.interactivity.mouse.pos_x *= i$jscomp$4.canvas.pxratio;
i$jscomp$4.interactivity.mouse.pos_y *= i$jscomp$4.canvas.pxratio;
}
i$jscomp$4.interactivity.status = "mousemove";
});
i$jscomp$4.interactivity.el.addEventListener("mouseleave", function(e$jscomp$26) {
i$jscomp$4.interactivity.mouse.pos_x = null;
i$jscomp$4.interactivity.mouse.pos_y = null;
i$jscomp$4.interactivity.status = "mouseleave";
});
}
if (i$jscomp$4.interactivity.events.onclick.enable) {
i$jscomp$4.interactivity.el.addEventListener("click", function() {
if (i$jscomp$4.interactivity.mouse.click_pos_x = i$jscomp$4.interactivity.mouse.pos_x, i$jscomp$4.interactivity.mouse.click_pos_y = i$jscomp$4.interactivity.mouse.pos_y, i$jscomp$4.interactivity.mouse.click_time = (new Date).getTime(), i$jscomp$4.interactivity.events.onclick.enable) {
switch(i$jscomp$4.interactivity.events.onclick.mode) {
case "push":
if (i$jscomp$4.particles.move.enable) {
i$jscomp$4.fn.modes.pushParticles(i$jscomp$4.interactivity.modes.push.particles_nb, i$jscomp$4.interactivity.mouse);
} else {
if (1 == i$jscomp$4.interactivity.modes.push.particles_nb) {
i$jscomp$4.fn.modes.pushParticles(i$jscomp$4.interactivity.modes.push.particles_nb, i$jscomp$4.interactivity.mouse);
} else {
if (i$jscomp$4.interactivity.modes.push.particles_nb > 1) {
i$jscomp$4.fn.modes.pushParticles(i$jscomp$4.interactivity.modes.push.particles_nb);
}
}
}
break;
case "remove":
i$jscomp$4.fn.modes.removeParticles(i$jscomp$4.interactivity.modes.remove.particles_nb);
break;
case "bubble":
i$jscomp$4.tmp.bubble_clicking = true;
break;
case "repulse":
i$jscomp$4.tmp.repulse_clicking = true;
i$jscomp$4.tmp.repulse_count = 0;
i$jscomp$4.tmp.repulse_finish = false;
setTimeout(function() {
i$jscomp$4.tmp.repulse_clicking = false;
}, 1E3 * i$jscomp$4.interactivity.modes.repulse.duration);
}
}
});
}
};
i$jscomp$4.fn.vendors.densityAutoParticles = function() {
if (i$jscomp$4.particles.number.density.enable) {
var e$jscomp$27 = i$jscomp$4.canvas.el.width * i$jscomp$4.canvas.el.height / 1E3;
if (i$jscomp$4.tmp.retina) {
e$jscomp$27 = e$jscomp$27 / (2 * i$jscomp$4.canvas.pxratio);
}
var a$jscomp$19 = e$jscomp$27 * i$jscomp$4.particles.number.value / i$jscomp$4.particles.number.density.value_area;
var t$jscomp$17 = i$jscomp$4.particles.array.length - a$jscomp$19;
if (0 > t$jscomp$17) {
i$jscomp$4.fn.modes.pushParticles(Math.abs(t$jscomp$17));
} else {
i$jscomp$4.fn.modes.removeParticles(t$jscomp$17);
}
}
};
i$jscomp$4.fn.vendors.checkOverlap = function(e$jscomp$28, a$jscomp$20) {
var t$jscomp$18 = 0;
for (; t$jscomp$18 < i$jscomp$4.particles.array.length; t$jscomp$18++) {
var s$jscomp$12 = i$jscomp$4.particles.array[t$jscomp$18];
var n$jscomp$13 = e$jscomp$28.x - s$jscomp$12.x;
var r$jscomp$9 = e$jscomp$28.y - s$jscomp$12.y;
var c$jscomp$6 = Math.sqrt(n$jscomp$13 * n$jscomp$13 + r$jscomp$9 * r$jscomp$9);
if (c$jscomp$6 <= e$jscomp$28.radius + s$jscomp$12.radius) {
e$jscomp$28.x = a$jscomp$20 ? a$jscomp$20.x : Math.random() * i$jscomp$4.canvas.w;
e$jscomp$28.y = a$jscomp$20 ? a$jscomp$20.y : Math.random() * i$jscomp$4.canvas.h;
i$jscomp$4.fn.vendors.checkOverlap(e$jscomp$28);
}
}
};
i$jscomp$4.fn.vendors.createSvgImg = function(e$jscomp$29) {
var a$jscomp$21 = i$jscomp$4.tmp.source_svg;
var t$jscomp$19 = /#([0-9A-F]{3,6})/gi;
var s$jscomp$13 = a$jscomp$21.replace(t$jscomp$19, function(a$jscomp$22, t$jscomp$20, i$jscomp$6, s$jscomp$14) {
if (e$jscomp$29.color.rgb) {
var n$jscomp$15 = "rgba(" + e$jscomp$29.color.rgb.r + "," + e$jscomp$29.color.rgb.g + "," + e$jscomp$29.color.rgb.b + "," + e$jscomp$29.opacity + ")";
} else {
n$jscomp$15 = "hsla(" + e$jscomp$29.color.hsl.h + "," + e$jscomp$29.color.hsl.s + "%," + e$jscomp$29.color.hsl.l + "%," + e$jscomp$29.opacity + ")";
}
return n$jscomp$15;
});
var n$jscomp$14 = new Blob([s$jscomp$13], {
type : "image/svg+xml;charset=utf-8"
});
var r$jscomp$10 = window.URL || window.webkitURL || window;
var c$jscomp$7 = r$jscomp$10.createObjectURL(n$jscomp$14);
var o$jscomp$4 = new Image;
o$jscomp$4.addEventListener("load", function() {
e$jscomp$29.img.obj = o$jscomp$4;
e$jscomp$29.img.loaded = true;
r$jscomp$10.revokeObjectURL(c$jscomp$7);
i$jscomp$4.tmp.count_svg++;
});
o$jscomp$4.src = c$jscomp$7;
};
i$jscomp$4.fn.vendors.destroypJS = function() {
cancelAnimationFrame(i$jscomp$4.fn.drawAnimFrame);
t$jscomp$3.remove();
pJSDom = null;
};
i$jscomp$4.fn.vendors.drawShape = function(e$jscomp$30, a$jscomp$23, t$jscomp$21, i$jscomp$7, s$jscomp$15, n$jscomp$16) {
var r$jscomp$11 = s$jscomp$15 * n$jscomp$16;
var c$jscomp$8 = s$jscomp$15 / n$jscomp$16;
var o$jscomp$5 = 180 * (c$jscomp$8 - 2) / c$jscomp$8;
var l$jscomp$3 = Math.PI - Math.PI * o$jscomp$5 / 180;
e$jscomp$30.save();
e$jscomp$30.beginPath();
e$jscomp$30.translate(a$jscomp$23, t$jscomp$21);
e$jscomp$30.moveTo(0, 0);
var v$jscomp$3 = 0;
for (; r$jscomp$11 > v$jscomp$3; v$jscomp$3++) {
e$jscomp$30.lineTo(i$jscomp$7, 0);
e$jscomp$30.translate(i$jscomp$7, 0);
e$jscomp$30.rotate(l$jscomp$3);
}
e$jscomp$30.fill();
e$jscomp$30.restore();
};
i$jscomp$4.fn.vendors.exportImg = function() {
window.open(i$jscomp$4.canvas.el.toDataURL("image/png"), "_blank");
};
i$jscomp$4.fn.vendors.loadImg = function(e$jscomp$31) {
if (i$jscomp$4.tmp.img_error = void 0, "" != i$jscomp$4.particles.shape.image.src) {
if ("svg" == e$jscomp$31) {
var a$jscomp$24 = new XMLHttpRequest;
a$jscomp$24.open("GET", i$jscomp$4.particles.shape.image.src);
a$jscomp$24.onreadystatechange = function(e$jscomp$32) {
if (4 == a$jscomp$24.readyState) {
if (200 == a$jscomp$24.status) {
i$jscomp$4.tmp.source_svg = e$jscomp$32.currentTarget.response;
i$jscomp$4.fn.vendors.checkBeforeDraw();
} else {
console.log("Error pJS - Image not found");
i$jscomp$4.tmp.img_error = true;
}
}
};
a$jscomp$24.send();
} else {
var t$jscomp$22 = new Image;
t$jscomp$22.addEventListener("load", function() {
i$jscomp$4.tmp.img_obj = t$jscomp$22;
i$jscomp$4.fn.vendors.checkBeforeDraw();
});
t$jscomp$22.src = i$jscomp$4.particles.shape.image.src;
}
} else {
console.log("Error pJS - No image.src");
i$jscomp$4.tmp.img_error = true;
}
};
i$jscomp$4.fn.vendors.draw = function() {
if ("image" == i$jscomp$4.particles.shape.type) {
if ("svg" == i$jscomp$4.tmp.img_type) {
if (i$jscomp$4.tmp.count_svg >= i$jscomp$4.particles.number.value) {
i$jscomp$4.fn.particlesDraw();
if (i$jscomp$4.particles.move.enable) {
i$jscomp$4.fn.drawAnimFrame = requestAnimFrame(i$jscomp$4.fn.vendors.draw);
} else {
cancelRequestAnimFrame(i$jscomp$4.fn.drawAnimFrame);
}
} else {
if (!i$jscomp$4.tmp.img_error) {
i$jscomp$4.fn.drawAnimFrame = requestAnimFrame(i$jscomp$4.fn.vendors.draw);
}
}
} else {
if (void 0 != i$jscomp$4.tmp.img_obj) {
i$jscomp$4.fn.particlesDraw();
if (i$jscomp$4.particles.move.enable) {
i$jscomp$4.fn.drawAnimFrame = requestAnimFrame(i$jscomp$4.fn.vendors.draw);
} else {
cancelRequestAnimFrame(i$jscomp$4.fn.drawAnimFrame);
}
} else {
if (!i$jscomp$4.tmp.img_error) {
i$jscomp$4.fn.drawAnimFrame = requestAnimFrame(i$jscomp$4.fn.vendors.draw);
}
}
}
} else {
i$jscomp$4.fn.particlesDraw();
if (i$jscomp$4.particles.move.enable) {
i$jscomp$4.fn.drawAnimFrame = requestAnimFrame(i$jscomp$4.fn.vendors.draw);
} else {
cancelRequestAnimFrame(i$jscomp$4.fn.drawAnimFrame);
}
}
};
i$jscomp$4.fn.vendors.checkBeforeDraw = function() {
if ("image" == i$jscomp$4.particles.shape.type) {
if ("svg" == i$jscomp$4.tmp.img_type && void 0 == i$jscomp$4.tmp.source_svg) {
i$jscomp$4.tmp.checkAnimFrame = requestAnimFrame(check);
} else {
cancelRequestAnimFrame(i$jscomp$4.tmp.checkAnimFrame);
if (!i$jscomp$4.tmp.img_error) {
i$jscomp$4.fn.vendors.init();
i$jscomp$4.fn.vendors.draw();
}
}
} else {
i$jscomp$4.fn.vendors.init();
i$jscomp$4.fn.vendors.draw();
}
};
i$jscomp$4.fn.vendors.init = function() {
i$jscomp$4.fn.retinaInit();
i$jscomp$4.fn.canvasInit();
i$jscomp$4.fn.canvasSize();
i$jscomp$4.fn.canvasPaint();
i$jscomp$4.fn.particlesCreate();
i$jscomp$4.fn.vendors.densityAutoParticles();
i$jscomp$4.particles.line_linked.color_rgb_line = hexToRgb(i$jscomp$4.particles.line_linked.color);
};
i$jscomp$4.fn.vendors.start = function() {
if (isInArray("image", i$jscomp$4.particles.shape.type)) {
i$jscomp$4.tmp.img_type = i$jscomp$4.particles.shape.image.src.substr(i$jscomp$4.particles.shape.image.src.length - 3);
i$jscomp$4.fn.vendors.loadImg(i$jscomp$4.tmp.img_type);
} else {
i$jscomp$4.fn.vendors.checkBeforeDraw();
}
};
i$jscomp$4.fn.vendors.eventsListeners();
i$jscomp$4.fn.vendors.start();
};
Object.deepExtend = function(e$jscomp$33, a$jscomp$25) {
var t$jscomp$23;
for (t$jscomp$23 in a$jscomp$25) {
if (a$jscomp$25[t$jscomp$23] && a$jscomp$25[t$jscomp$23].constructor && a$jscomp$25[t$jscomp$23].constructor === Object) {
e$jscomp$33[t$jscomp$23] = e$jscomp$33[t$jscomp$23] || {};
arguments.callee(e$jscomp$33[t$jscomp$23], a$jscomp$25[t$jscomp$23]);
} else {
e$jscomp$33[t$jscomp$23] = a$jscomp$25[t$jscomp$23];
}
}
return e$jscomp$33;
}, window.requestAnimFrame = function() {
return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(e$jscomp$34) {
window.setTimeout(e$jscomp$34, 1E3 / 60);
};
}(), window.cancelRequestAnimFrame = function() {
return window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || clearTimeout;
}(), window.pJSDom = [], window.particlesJS = function(e$jscomp$35, a$jscomp$26) {
if ("string" != typeof e$jscomp$35) {
a$jscomp$26 = e$jscomp$35;
e$jscomp$35 = "particles-js";
}
if (!e$jscomp$35) {
e$jscomp$35 = "particles-js";
}
var t$jscomp$24 = document.getElementById(e$jscomp$35);
var i$jscomp$8 = "particles-js-canvas-el";
var s$jscomp$16 = t$jscomp$24.getElementsByClassName(i$jscomp$8);
if (s$jscomp$16.length) {
for (; s$jscomp$16.length > 0;) {
t$jscomp$24.removeChild(s$jscomp$16[0]);
}
}
var n$jscomp$17 = document.createElement("canvas");
n$jscomp$17.className = i$jscomp$8;
n$jscomp$17.style.width = "100%";
n$jscomp$17.style.height = "100%";
var r$jscomp$12 = document.getElementById(e$jscomp$35).appendChild(n$jscomp$17);
if (null != r$jscomp$12) {
pJSDom.push(new pJS(e$jscomp$35, a$jscomp$26));
}
}, window.particlesJS.load = function(e$jscomp$36, a$jscomp$27, t$jscomp$25) {
var i$jscomp$9 = new XMLHttpRequest;
i$jscomp$9.open("GET", a$jscomp$27);
i$jscomp$9.onreadystatechange = function(a$jscomp$28) {
if (4 == i$jscomp$9.readyState) {
if (200 == i$jscomp$9.status) {
var s$jscomp$17 = JSON.parse(a$jscomp$28.currentTarget.response);
window.particlesJS(e$jscomp$36, s$jscomp$17);
if (t$jscomp$25) {
t$jscomp$25();
}
} else {
console.log("Error pJS - XMLHttpRequest status: " + i$jscomp$9.status);
console.log("Error pJS - File config not found");
}
}
};
i$jscomp$9.send();
};
